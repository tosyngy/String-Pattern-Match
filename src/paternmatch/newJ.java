/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package paternmatch;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

/**
 *
 * @author akisft-xisys
 */
public class newJ extends javax.swing.JFrame {

    public Connection con;
    public ResultSet rs, rs2;
    public PreparedStatement ps;
    public Statement st;
    public Statement st2;
    public int count1 = 0;
    public int count2 = 0;
    public int count3 = 0;

    //StringBuffer sb = new StringBuffer();
    String key = "";
    DefaultComboBoxModel combo = new DefaultComboBoxModel();
    //CosineAlgo cosAlg = new CosineAlgo();
    //JaccardAlgo jacAlg = new JaccardAlgo();
    DefaultListModel list;
    DefaultListModel list2;
    DefaultListModel list3;
    String buttonselected;

    /**
     * Creates new form newJ
     */
    public newJ() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList2 = new javax.swing.JList();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jTextField1 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jList3 = new javax.swing.JList();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setEnabled(false);
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jList2.setBorder(javax.swing.BorderFactory.createTitledBorder("Cosine"));
        jScrollPane1.setViewportView(jList2);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 120, 304, 202));

        jList1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(""), "Boyer Moore"));
        jList1.setToolTipText("");
        jScrollPane2.setViewportView(jList1);

        jPanel1.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 120, 314, 199));

        jTextField1.setToolTipText("Enter Pattern Match");
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });
        jPanel1.add(jTextField1, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 390, 310, 40));

        jLabel1.setText("Relation Type:");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 490, 110, 30));

        jComboBox1.setEditable(true);
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "0.1", "0.2", "0.3", "0.4", "0.5", "0.6", "0.7", "0.8", "0.9", "1.0" }));
        jComboBox1.setToolTipText("Select or type Threshold");
        jPanel1.add(jComboBox1, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 440, -1, 40));

        jLabel2.setText("Enter Pattern Match:");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 390, 180, 40));

        jButton1.setText("=");
        buttonGroup1.add(jButton1);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 490, 60, 40));

        jButton2.setText("=<");
        buttonGroup1.add(jButton2);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 490, 70, 40));

        jButton3.setText("<");
        buttonGroup1.add(jButton3);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 490, 70, 40));

        jButton4.setText(">");
        buttonGroup1.add(jButton4);
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton4, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 490, 60, 40));

        jButton5.setText(">=");
        buttonGroup1.add(jButton5);
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton5, new org.netbeans.lib.awtextra.AbsoluteConstraints(760, 490, 70, 40));

        jButton6.setText("TEST");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton6, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 540, 200, 40));

        jLabel3.setText("Num:");
        jLabel3.setAutoscrolls(true);
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 330, -1, -1));

        jLabel4.setText("Num:");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 330, -1, -1));

        jLabel6.setText(".");
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 330, 70, -1));

        jLabel7.setText(".");
        jPanel1.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 330, 60, -1));

        jList3.setBorder(javax.swing.BorderFactory.createTitledBorder("KMP"));
        jScrollPane3.setViewportView(jList3);

        jPanel1.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 120, 304, 202));

        jLabel8.setText(".");
        jPanel1.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 330, 70, -1));

        jLabel9.setText("Num:");
        jPanel1.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 330, -1, -1));

        jLabel10.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel1.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 370, 900, 220));

        jLabel11.setText("Threshold:");
        jPanel1.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 450, 110, 30));

        jLabel12.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        jLabel12.setText("COMPARISM OF 3 DIFFERENT STRING SEARCH TECHNIQUES");
        jPanel1.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 10, 790, 70));

        jLabel13.setText(".");
        jPanel1.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 330, 90, -1));

        jLabel14.setText("Time(sec):");
        jLabel14.setAutoscrolls(true);
        jPanel1.add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 330, -1, -1));

        jLabel15.setText(".");
        jPanel1.add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 330, 90, -1));

        jLabel16.setText("Time(sec):");
        jLabel16.setAutoscrolls(true);
        jPanel1.add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 330, -1, -1));

        jLabel17.setText(".");
        jPanel1.add(jLabel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(870, 330, 90, -1));

        jLabel18.setText("Time(sec):");
        jLabel18.setAutoscrolls(true);
        jPanel1.add(jLabel18, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 330, -1, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 982, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 652, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        if (buttonselected.isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "Please specify range");
            return;
        }
        JOptionPane.showMessageDialog(rootPane, buttonselected);

        jList2.removeAll();
        jList1.removeAll();
        jList3.removeAll();
        count1 = 0;
        count2 = 0;
        count3 = 0;

        try {
            new Thread(new newJ.showtick_()).start();

        } catch (Exception ex) {
//                ex.printStackTrace();
        }

// TODO add your handling code here:
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        buttonselected = jButton1.getText();
        jButton2.setEnabled(true);
        jButton3.setEnabled(true);
        jButton4.setEnabled(true);
        jButton5.setEnabled(true);
        jButton1.setEnabled(false);

// TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        buttonselected = jButton2.getText();
        jButton1.setEnabled(true);
        jButton3.setEnabled(true);
        jButton4.setEnabled(true);
        jButton5.setEnabled(true);
        jButton2.setEnabled(false);
// TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        buttonselected = jButton3.getText();
        jButton2.setEnabled(true);
        jButton1.setEnabled(true);
        jButton4.setEnabled(true);
        jButton5.setEnabled(true);
        jButton3.setEnabled(false);
// TODO add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        buttonselected = jButton4.getText();
        jButton2.setEnabled(true);
        jButton3.setEnabled(true);
        jButton1.setEnabled(true);
        jButton5.setEnabled(true);
        jButton4.setEnabled(false);
// TODO add your handling code here:
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        buttonselected = jButton5.getText();
        jButton2.setEnabled(true);
        jButton3.setEnabled(true);
        jButton4.setEnabled(true);
        jButton1.setEnabled(true);
        jButton5.setEnabled(false);
// TODO add your handling code here:
    }//GEN-LAST:event_jButton5ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(newJ.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(newJ.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(newJ.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(newJ.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new newJ().setVisible(true);
            }
        });
    }

    class showtick_ implements Runnable {

        @Override
        public void run() {
            try {

                list = new DefaultListModel();
                list2 = new DefaultListModel();
                list3 = new DefaultListModel();

                if (!jTextField1.getText().isEmpty()) {
                    key = jTextField1.getText();
                    loadallwords(key.toLowerCase());
                } else {
                    JOptionPane.showMessageDialog(rootPane, "Please enter a partner");
                    return;
                }

                /*if (list.isEmpty() && !jTextField1.getText().isEmpty()) {
                 jLabel1.setText("no string found");
                 } else {
                 jLabel1.setText("No of word found is " + list.size());
                 }*/
                System.out.println(">>>>>>>>>>>>>>>>>>>>>>>>>>>>> " + key);
            } catch (Exception e) {
            }
        }

    }

    public void dbconnect() {
        try {
            String url = "jdbc:mysql://localhost:3306/";
            String dbName = "pos";
            String driver = "com.mysql.jdbc.Driver";
            String userName = "root";
            String password = "";

            Class.forName(driver).newInstance();
            con = DriverManager.getConnection(url + dbName, userName, password);
            st = con.createStatement();
        } catch (Exception e) {
            System.out.println("connect er " + e);
        }
    }

    private void loadallwords(String patt) {
        long starttime = 0, endtime = 0;

        try {
            starttime = (long) (new GregorianCalendar().getTimeInMillis()) / 1000;
            dbconnect();

            rs = st.executeQuery("select item from item order by item");

            //data.addElement(rs.getString("phone"));
            while (rs.next()) {
                boolean bym = boyermoore(rs.getString("item").toLowerCase(), patt.toLowerCase());

                if (bym) {
                    count1 = count1 + 1;
                    list.addElement(rs.getString("item"));
                }
                jLabel6.setText("" + count1);
                jList1.setModel(list);
                endtime = (long) (new GregorianCalendar().getTimeInMillis()) / 1000;
                jLabel13.setText((endtime - starttime) + "");
            }

            //data.addElement(rs.getString("phone"));
            starttime = (long) (new GregorianCalendar().getTimeInMillis()) / 1000;
            rs = st.executeQuery("select item from item order by item");
            while (rs.next()) {
                boolean test = false;
                boolean cos = false;
                cos = Cosine_Similarity_Score(rs.getString("item").toLowerCase(), patt.toLowerCase());

                if (cos) {
                    count2 = count2 + 1;
                    list2.addElement(rs.getString("item"));
                }
                jLabel7.setText("" + count2);
                jList2.setModel(list2);
                endtime = (long) (new GregorianCalendar().getTimeInMillis()) / 1000;
                jLabel15.setText((endtime - starttime) + "");
            }

            starttime = (long) (new GregorianCalendar().getTimeInMillis()) / 1000;
            rs = st.executeQuery("select item from item order by item");

            //data.addElement(rs.getString("phone"));
            while (rs.next()) {
                boolean test = false;
                boolean kmp = false;

                kmp = kmp(rs.getString("item").toLowerCase().toCharArray(), patt.toLowerCase().toCharArray());
                if (kmp) {
                    count3 = count3 + 1;
                    list3.addElement(rs.getString("item"));
                }
                jLabel8.setText("" + count3);
                jList3.setModel(list3);
                endtime = (long) (new GregorianCalendar().getTimeInMillis()) / 1000;
                jLabel17.setText((endtime - starttime) + "");
            }

        } catch (SQLException e) {
            System.out.println("loadcontact " + e);
        }
    }

    class variables {

        int val1;
        int val2;

        variables(int v1, int v2) {
            this.val1 = v1;
            this.val2 = v2;
        }

        public void Update_VAl(int v1, int v2) {
            this.val1 = v1;
            this.val2 = v2;
        }

    }//end of class values

    public boolean Cosine_Similarity_Score(String Text1, String Text2) {

        double sim_score = 0.0000000;
        //1. Identify distinct words from both documents
        char[] word_seq_text1 = Text1.toCharArray();
        char[] word_seq_text2 = Text2.toCharArray();
        boolean res = false;
        Hashtable<String, newJ.variables> word_freq_vector = new Hashtable<String, newJ.variables>();
        LinkedList<String> Distinct_words_text_1_2 = new LinkedList<String>();

        //prepare word frequency vector by using Text1
        for (int i = 0; i < word_seq_text1.length; i++) {
            char tmp_wd = word_seq_text1[i];
            if (tmp_wd > 0) {
                if (word_freq_vector.containsKey(tmp_wd + "")) {
                    newJ.variables vals1 = word_freq_vector.get(tmp_wd + "");
                    int freq1 = vals1.val1 + 1;
                    int freq2 = vals1.val2;
                    vals1.Update_VAl(freq1, freq2);
                    word_freq_vector.put(tmp_wd + "", vals1);
                } else {
                    newJ.variables vals1 = new newJ.variables(1, 0);
                    word_freq_vector.put(tmp_wd + "", vals1);
                    Distinct_words_text_1_2.add(tmp_wd + "");
                }
            }
        }

        //prepare word frequency vector by using Text2
        for (int i = 0; i < word_seq_text2.length; i++) {
            char tmp_wd = word_seq_text2[i];
            if (tmp_wd > 0) {
                if (word_freq_vector.containsKey(tmp_wd + "")) {
                    newJ.variables vals1 = word_freq_vector.get(tmp_wd + "");
                    int freq1 = vals1.val1;
                    int freq2 = vals1.val2 + 1;
                    vals1.Update_VAl(freq1, freq2);
                    word_freq_vector.put(tmp_wd + "", vals1);
                } else {
                    newJ.variables vals1 = new newJ.variables(0, 1);
                    word_freq_vector.put(tmp_wd + "", vals1);
                    Distinct_words_text_1_2.add(tmp_wd + "");
                }
            }
        }

        //calculate the cosine similarity score.
        double VectAB = 0.0000000;
        double VectA_Sq = 0.0000000;
        double VectB_Sq = 0.0000000;

        for (int i = 0; i < Distinct_words_text_1_2.size(); i++) {
            newJ.variables vals12 = word_freq_vector.get(Distinct_words_text_1_2.get(i));

            double freq1 = (double) vals12.val1;
            double freq2 = (double) vals12.val2;
            System.out.println(Distinct_words_text_1_2.get(i) + "-----" + freq1 + "-----" + freq2);

            VectAB = VectAB + (freq1 * freq2);

            VectA_Sq = VectA_Sq + freq1 * freq1;
            VectB_Sq = VectB_Sq + freq2 * freq2;
        }
        System.out.println("VectAB " + VectAB + " VectA_Sq " + VectA_Sq + " VectB_Sq " + VectB_Sq);
        sim_score = ((VectAB) / (Math.sqrt(VectA_Sq) * Math.sqrt(VectB_Sq)));
        System.out.println(" sim scdore" + sim_score);

        if (buttonselected.equals(jButton1.getText())) {
            if ((int) (sim_score * 1000000000) == (int) (Double.parseDouble(jComboBox1.getSelectedItem().toString()) * 1000000000)) {
                // list.addElement(Text1);
                res = true;
            }
        } else if (buttonselected.equals(jButton2.getText())) {
            if ((sim_score) <= Double.parseDouble(jComboBox1.getSelectedItem().toString())) {
                // list.addElement(Text1);
                res = true;
            }
        } else if (buttonselected.equals(jButton3.getText())) {
            if ((sim_score) < Double.parseDouble(jComboBox1.getSelectedItem().toString())) {
                // list.addElement(Text1);
                res = true;
            }
        } else if (buttonselected.equals(jButton4.getText())) {
            if ((sim_score) > Double.parseDouble(jComboBox1.getSelectedItem().toString())) {
                // list.addElement(Text1);
                res = true;
            }
        } else if (buttonselected.equals(jButton5.getText())) {
            if ((sim_score) >= Double.parseDouble(jComboBox1.getSelectedItem().toString())) {
                // list.addElement(Text1);
                res = true;
            }
        }

//        if ((sim_score) > Double.parseDouble(jComboBox1.getSelectedItem().toString())) {
//            // list.addElement(Text1);
//            res = true;
//        }
        return res;

    }
 //cosine similarity ends

    //jaccard similarity began
    public boolean jaccardSimilarity(String similar1, String similar2) {
        HashSet<String> h1 = new HashSet<String>();
        HashSet<String> h2 = new HashSet<String>();
        boolean res = false;
        for (char s : similar1.toCharArray()) {
            h1.add(s + "");
        }
        System.out.println("h1 " + h1);
        for (char s : similar2.toCharArray()) {
            h2.add(s + "");
        }
        System.out.println("h2 " + h2);

        int sizeh1 = h1.size();
        //Retains all elements in h3 that are contained in h2 ie intersection
        h1.retainAll(h2);
        //h1 now contains the intersection of h1 and h2
        System.out.println("Intersection " + h1);

        h2.removeAll(h1);
        //h2 now contains unique elements
        System.out.println("Unique in h2 " + h2);

        //Union
        int union = sizeh1 + h2.size();
        int intersection = h1.size();
        double result = (double) intersection / union;
        System.out.println(" result " + result);

        if (buttonselected.equals(jButton1.getText())) {
            if ((int) (result * 1000000000) == (int) (Double.parseDouble(jComboBox1.getSelectedItem().toString()) * 1000000000)) {
                // list.addElement(Text1);
                res = true;
            }
        } else if (buttonselected.equals(jButton2.getText())) {
            if ((result) <= Double.parseDouble(jComboBox1.getSelectedItem().toString())) {
                // list.addElement(Text1);
                res = true;
            }
        } else if (buttonselected.equals(jButton3.getText())) {
            if ((result) < Double.parseDouble(jComboBox1.getSelectedItem().toString())) {
                // list.addElement(Text1);
                res = true;
            }
        } else if (buttonselected.equals(jButton4.getText())) {
            if ((result) > Double.parseDouble(jComboBox1.getSelectedItem().toString())) {
                // list.addElement(Text1);
                res = true;
            }
        } else if (buttonselected.equals(jButton5.getText())) {
            if ((result) >= Double.parseDouble(jComboBox1.getSelectedItem().toString())) {
                // list.addElement(Text1);
                res = true;
            }
        }

//    if (result > Double.parseDouble(jComboBox1.getSelectedItem().toString())) {
//      // list.addElement(similar1);
//      res = true;
//    }
        return res;

    }

    public boolean kmp(char[] text, char[] ptrn) {
        boolean res = false;
        int i = 0, j = 0;
        // pattern and text lengths
        int ptrnLen = ptrn.length;
        int txtLen = text.length;

        // initialize new array and preprocess the pattern
        int[] b = preProcessPattern(ptrn);

        while (i < txtLen) {
            while (j >= 0 && text[i] != ptrn[j]) {
                System.out.println("Mismatch happened, between text char "
                        + text[i] + " and pattern char " + ptrn[j]
                        + ", \nhence jumping the value of " + "j from " + j
                        + " to " + b[j] + " at text index i at " + i
                        + " based on partial match table");
                j = b[j];
            }
            i++;
            j++;

            // a match is found
            if (j == ptrnLen) {
                System.out.println("FOUND SUBSTRING AT i " + i + " and index:"
                        + (i - ptrnLen));
                System.out.println("Setting j from " + j + " to " + b[j]);
                j = b[j];
                for (int m = (i - 1); m >= (i - ptrnLen); m--) {
                    text[m] = Character.toUpperCase(text[m]);

                }
                System.out.println("testing.4.. " + Arrays.toString(text));

                String word = Arrays.toString(text).replace(',', ' ');
                // combo.addElement(word);
                // list.addElement(word);
                res = true;
                break;
            }
        }
        return res;
    }

    public int[] preProcessPattern(char[] ptrn) {
        int i = 0, j = -1;
        int ptrnLen = ptrn.length;
        int[] b = new int[ptrnLen + 1];

        b[i] = j;
        while (i < ptrnLen) {
            while (j >= 0 && ptrn[i] != ptrn[j]) {
                // if there is mismatch consider next widest border
                j = b[j];
            }
            i++;
            j++;
            b[i] = j;
        }
        // print pettern, partial match table and index
        System.out
                .println("printing pattern, partial match table, and its index");
        System.out.print(" ");
        for (char c : ptrn) {
            System.out.print(c + "   ");
        }
        System.out.println(" ");
        for (int tmp : b) {
            System.out.print(tmp + "   ");
        }
        System.out.print("\n ");
        for (int l = 0; l < ptrn.length; l++) {
            System.out.print(l + "   ");
        }
        System.out.println();
        return b;
    }

    static boolean boyermoore(String s1, String s2) {
        List<Integer> matches = match(s1, s2);
        for (Integer integer : matches) {
            System.out.println("Match at: " + integer);
        }
        return (!matches.isEmpty());

    }

    public static List<Integer> match(String pattern, String text) {
        List<Integer> matches = new ArrayList<Integer>();
        int m = text.length();
        int n = pattern.length();
        Map<Character, Integer> rightMostIndexes = preprocessForBadCharacterShift(pattern);
        int alignedAt = 0;
        while (alignedAt + (n - 1) < m) {
            for (int indexInPattern = n - 1; indexInPattern >= 0; indexInPattern--) {
                int indexInText = alignedAt + indexInPattern;
                char x = text.charAt(indexInText);
                char y = pattern.charAt(indexInPattern);
                if (indexInText >= m) {
                    break;
                }
                if (x != y) {
                    Integer r = rightMostIndexes.get(x);
                    if (r == null) {
                        alignedAt = indexInText + 1;
                    } else {
                        int shift = indexInText - (alignedAt + r);
                        alignedAt += shift > 0 ? shift : 1;
                    }
                    break;
                } else if (indexInPattern == 0) {
                    matches.add(alignedAt);
                    alignedAt++;
                }
            }
        }
        return matches;
    }

    private static Map<Character, Integer> preprocessForBadCharacterShift(
            String pattern) {
        Map<Character, Integer> map = new HashMap<Character, Integer>();
        for (int i = pattern.length() - 1; i >= 0; i--) {
            char c = pattern.charAt(i);
            if (!map.containsKey(c)) {
                map.put(c, i);
            }
        }
        return map;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JList jList1;
    private javax.swing.JList jList2;
    private javax.swing.JList jList3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
