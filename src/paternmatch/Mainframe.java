/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package paternmatch;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.LinkedList;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;

/**
 *
 * @author akisft-xisys
 */
public class Mainframe extends javax.swing.JFrame {

  public Connection con;
  public ResultSet rs, rs2;
  public PreparedStatement ps;
  public Statement st;
  public Statement st2;

  //StringBuffer sb = new StringBuffer();
  String key = "";
  DefaultComboBoxModel combo = new DefaultComboBoxModel();
  //CosineAlgo cosAlg = new CosineAlgo();
  JaccardAlgo jacAlg = new JaccardAlgo();
  DefaultListModel list;

  /**
   * Creates new form Mainframe
   */
  public Mainframe() {
    initComponents();
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        jCheckBoxMenuItem1 = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItem2 = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItem3 = new javax.swing.JCheckBoxMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setBackground(new java.awt.Color(255, 0, 0));
        jLabel1.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N

        jButton1.setText("Exit");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTextField1.setBackground(new java.awt.Color(255, 255, 255));
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });
        jTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextField1KeyReleased(evt);
            }
        });

        jScrollPane3.setViewportView(jList1);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 424, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 437, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 94, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(16, 16, 16))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addContainerGap())
        );

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Algorithm");

        jCheckBoxMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_1, java.awt.event.InputEvent.ALT_MASK));
        jCheckBoxMenuItem1.setSelected(true);
        jCheckBoxMenuItem1.setText("KMP");
        jCheckBoxMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItem1ActionPerformed(evt);
            }
        });
        jMenu2.add(jCheckBoxMenuItem1);

        jCheckBoxMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_2, java.awt.event.InputEvent.ALT_MASK));
        jCheckBoxMenuItem2.setText("Cosine");
        jCheckBoxMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItem2ActionPerformed(evt);
            }
        });
        jMenu2.add(jCheckBoxMenuItem2);

        jCheckBoxMenuItem3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_3, java.awt.event.InputEvent.ALT_MASK));
        jCheckBoxMenuItem3.setText("Jaccard");
        jCheckBoxMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItem3ActionPerformed(evt);
            }
        });
        jMenu2.add(jCheckBoxMenuItem3);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(17, 17, 17))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

  private void jTextField1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField1KeyReleased
    try {
      new Thread(new showtick_()).start();

    } catch (Exception ex) {
//                ex.printStackTrace();
    }

    // TODO add your handling code here:
  }//GEN-LAST:event_jTextField1KeyReleased

  private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
    System.exit(0);
    // TODO add your handling code here:
  }//GEN-LAST:event_jButton1ActionPerformed

  private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
    // TODO add your handling code here:
  }//GEN-LAST:event_jTextField1ActionPerformed

  private void jCheckBoxMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItem1ActionPerformed
    if (jCheckBoxMenuItem1.isSelected()) {
      jCheckBoxMenuItem2.setSelected(false);
      jCheckBoxMenuItem3.setSelected(false);
      try {
        new Thread(new showtick_()).start();

      } catch (Exception ex) {
//                ex.printStackTrace();
      }
    }
    // TODO add your handling code here:
  }//GEN-LAST:event_jCheckBoxMenuItem1ActionPerformed

  private void jCheckBoxMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItem2ActionPerformed
    if (jCheckBoxMenuItem2.isSelected()) {
      jCheckBoxMenuItem1.setSelected(false);
      jCheckBoxMenuItem3.setSelected(false);
      try {
        new Thread(new showtick_()).start();

      } catch (Exception ex) {
//                ex.printStackTrace();
      }
    }
// TODO add your handling code here:
  }//GEN-LAST:event_jCheckBoxMenuItem2ActionPerformed

  private void jCheckBoxMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItem3ActionPerformed
    if (jCheckBoxMenuItem3.isSelected()) {
      jCheckBoxMenuItem2.setSelected(false);
      jCheckBoxMenuItem1.setSelected(false);
      try {
        new Thread(new showtick_()).start();

      } catch (Exception ex) {
//                ex.printStackTrace();
      }
    }
    // TODO add your handling code here:
  }//GEN-LAST:event_jCheckBoxMenuItem3ActionPerformed

  class showtick_ implements Runnable {

    @Override
    public void run() {
      try {

        list = new DefaultListModel();

        if (!jTextField1.getText().isEmpty()) {
          key = jTextField1.getText();
          loadallwords(key.toLowerCase());
        }

        jList1.setModel(list);
        /*if (list.isEmpty() && !jTextField1.getText().isEmpty()) {
         jLabel1.setText("no string found");
         } else {
         jLabel1.setText("No of word found is " + list.size());
         }*/
        System.out.println(">>>>>>>>>>>>>>>>>>>>>>>>>>>>> " + key);
      } catch (Exception e) {
      }
    }

  }

  /**
   * @param args the command line arguments
   */
  public static void main(String args[]) {
    /* Set the Nimbus look and feel */
    //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
     * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
     */
    try {
      for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
        if ("Nimbus".equals(info.getName())) {
          javax.swing.UIManager.setLookAndFeel(info.getClassName());
          break;
        }
      }
    } catch (ClassNotFoundException ex) {
      java.util.logging.Logger.getLogger(Mainframe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (InstantiationException ex) {
      java.util.logging.Logger.getLogger(Mainframe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (IllegalAccessException ex) {
      java.util.logging.Logger.getLogger(Mainframe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (javax.swing.UnsupportedLookAndFeelException ex) {
      java.util.logging.Logger.getLogger(Mainframe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    }
    //</editor-fold>

    /* Create and display the form */
    java.awt.EventQueue.invokeLater(new Runnable() {
      public void run() {
        new Mainframe().setVisible(true);
      }
    });
  }

  public int[] preProcessPattern(char[] ptrn) {
    int i = 0, j = -1;
    int ptrnLen = ptrn.length;
    int[] b = new int[ptrnLen + 1];

    b[i] = j;
    while (i < ptrnLen) {
      while (j >= 0 && ptrn[i] != ptrn[j]) {
        // if there is mismatch consider next widest border
        j = b[j];
      }
      i++;
      j++;
      b[i] = j;
    }
    // print pettern, partial match table and index
    System.out
            .println("printing pattern, partial match table, and its index");
    System.out.print(" ");
    for (char c : ptrn) {
      System.out.print(c + "   ");
    }
    System.out.println(" ");
    for (int tmp : b) {
      System.out.print(tmp + "   ");
    }
    System.out.print("\n ");
    for (int l = 0; l < ptrn.length; l++) {
      System.out.print(l + "   ");
    }
    System.out.println();
    return b;
  }

  /**
   * Based on the pre processed array, search for the pattern in the text
   *
   * @param text text over which search happens
   * @param ptrn pattern that is to be searched
   */
  public boolean searchSubString(char[] text, char[] ptrn) {
    boolean res = false;
    int i = 0, j = 0;
    // pattern and text lengths
    int ptrnLen = ptrn.length;
    int txtLen = text.length;

    // initialize new array and preprocess the pattern
    int[] b = preProcessPattern(ptrn);

    while (i < txtLen) {
      while (j >= 0 && text[i] != ptrn[j]) {
        System.out.println("Mismatch happened, between text char "
                + text[i] + " and pattern char " + ptrn[j]
                + ", \nhence jumping the value of " + "j from " + j
                + " to " + b[j] + " at text index i at " + i
                + " based on partial match table");
        j = b[j];
      }
      i++;
      j++;

      // a match is found
      if (j == ptrnLen) {
        System.out.println("FOUND SUBSTRING AT i " + i + " and index:"
                + (i - ptrnLen));
        System.out.println("Setting j from " + j + " to " + b[j]);
        j = b[j];
        for (int m = (i - 1); m >= (i - ptrnLen); m--) {
          text[m] = Character.toUpperCase(text[m]);

        }
        System.out.println("testing.4.. " + Arrays.toString(text));

        String word = Arrays.toString(text).replace(',', ' ');
        // combo.addElement(word);
        // list.addElement(word);
        res = true;
        break;
      }
    }
    return res;
  }

  public void dbconnect() {
    try {
      String url = "jdbc:mysql://localhost:3306/";
      String dbName = "pos";
      String driver = "com.mysql.jdbc.Driver";
      String userName = "root";
      String password = "";

      Class.forName(driver).newInstance();
      con = DriverManager.getConnection(url + dbName, userName, password);
      st = con.createStatement();
    } catch (Exception e) {
      System.out.println("connect er " + e);
    }
  }

  private void loadallwords(String patt) {
    try {
      dbconnect();
      String srch = "%" + jTextField1.getText() + "%";
      if (!jCheckBoxMenuItem1.isSelected() && !jCheckBoxMenuItem2.isSelected() && !jCheckBoxMenuItem3.isSelected()) {
        rs = st.executeQuery("select item from item where item like '" + srch + "' order by item");
        while (rs.next()) {

          list.addElement(rs.getString("item"));
        }
        return;
      }

      rs = st.executeQuery("select item from item order by item");

      //data.addElement(rs.getString("phone"));
      while (rs.next()) {
        boolean test = false;
        boolean kmp = false, jac = false, cos = false;
        if (jCheckBoxMenuItem1.isSelected()) {
          kmp = searchSubString(rs.getString("item").toLowerCase().toCharArray(), patt.toLowerCase().toCharArray());
        }
        if (jCheckBoxMenuItem2.isSelected()) {
          cos = Cosine_Similarity_Score(rs.getString("item").toLowerCase(), patt.toLowerCase());
        }
        if (jCheckBoxMenuItem3.isSelected()) {
          jac = jaccardSimilarity(rs.getString("item").toLowerCase(), patt.toLowerCase());
        }

        test = kmp | jac | cos;
        if (test) {
          list.addElement(rs.getString("item"));
        }
      }

    } catch (SQLException e) {
      System.out.println("loadcontact " + e);
    }
  }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem1;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem2;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JList jList1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables

  //cosine similarity began
  class variables {

    int val1;
    int val2;

    variables(int v1, int v2) {
      this.val1 = v1;
      this.val2 = v2;
    }

    public void Update_VAl(int v1, int v2) {
      this.val1 = v1;
      this.val2 = v2;
    }

  }//end of class values

  public boolean Cosine_Similarity_Score(String Text1, String Text2) {

    double sim_score = 0.0000000;
    //1. Identify distinct words from both documents
    char[] word_seq_text1 = Text1.toCharArray();
    char[] word_seq_text2 = Text2.toCharArray();
    boolean res = false;
    Hashtable<String, variables> word_freq_vector = new Hashtable<String, Mainframe.variables>();
    LinkedList<String> Distinct_words_text_1_2 = new LinkedList<String>();

    //prepare word frequency vector by using Text1
    for (int i = 0; i < word_seq_text1.length; i++) {
      char tmp_wd = word_seq_text1[i];
      if (tmp_wd > 0) {
        if (word_freq_vector.containsKey(tmp_wd + "")) {
          variables vals1 = word_freq_vector.get(tmp_wd + "");
          int freq1 = vals1.val1 + 1;
          int freq2 = vals1.val2;
          vals1.Update_VAl(freq1, freq2);
          word_freq_vector.put(tmp_wd + "", vals1);
        } else {
          variables vals1 = new variables(1, 0);
          word_freq_vector.put(tmp_wd + "", vals1);
          Distinct_words_text_1_2.add(tmp_wd + "");
        }
      }
    }

    //prepare word frequency vector by using Text2
    for (int i = 0; i < word_seq_text2.length; i++) {
      char tmp_wd = word_seq_text2[i];
      if (tmp_wd > 0) {
        if (word_freq_vector.containsKey(tmp_wd + "")) {
          variables vals1 = word_freq_vector.get(tmp_wd + "");
          int freq1 = vals1.val1;
          int freq2 = vals1.val2 + 1;
          vals1.Update_VAl(freq1, freq2);
          word_freq_vector.put(tmp_wd + "", vals1);
        } else {
          variables vals1 = new variables(0, 1);
          word_freq_vector.put(tmp_wd + "", vals1);
          Distinct_words_text_1_2.add(tmp_wd + "");
        }
      }
    }

    //calculate the cosine similarity score.
    double VectAB = 0.0000000;
    double VectA_Sq = 0.0000000;
    double VectB_Sq = 0.0000000;

    for (int i = 0; i < Distinct_words_text_1_2.size(); i++) {
      variables vals12 = word_freq_vector.get(Distinct_words_text_1_2.get(i));

      double freq1 = (double) vals12.val1;
      double freq2 = (double) vals12.val2;
      System.out.println(Distinct_words_text_1_2.get(i) + "-----" + freq1 + "-----" + freq2);

      VectAB = VectAB + (freq1 * freq2);

      VectA_Sq = VectA_Sq + freq1 * freq1;
      VectB_Sq = VectB_Sq + freq2 * freq2;
    }
    System.out.println("VectAB " + VectAB + " VectA_Sq " + VectA_Sq + " VectB_Sq " + VectB_Sq);
    sim_score = ((VectAB) / (Math.sqrt(VectA_Sq) * Math.sqrt(VectB_Sq)));
    System.out.println(" sim scdore" + sim_score);
    if ((sim_score) > 0.33) {
      // list.addElement(Text1);
      res = true;
    }

    return res;

  }
 //cosine similarity ends

  //jaccard similarity began
  public boolean jaccardSimilarity(String similar1, String similar2) {
    HashSet<String> h1 = new HashSet<String>();
    HashSet<String> h2 = new HashSet<String>();
    boolean res = false;
    for (char s : similar1.toCharArray()) {
      h1.add(s + "");
    }
    System.out.println("h1 " + h1);
    for (char s : similar2.toCharArray()) {
      h2.add(s + "");
    }
    System.out.println("h2 " + h2);

    int sizeh1 = h1.size();
    //Retains all elements in h3 that are contained in h2 ie intersection
    h1.retainAll(h2);
    //h1 now contains the intersection of h1 and h2
    System.out.println("Intersection " + h1);

    h2.removeAll(h1);
    //h2 now contains unique elements
    System.out.println("Unique in h2 " + h2);

    //Union
    int union = sizeh1 + h2.size();
    int intersection = h1.size();
    double result = (double) intersection / union;
    System.out.println(" result " + result);
    if (result > .33) {
      // list.addElement(similar1);
      res = true;
    }
    return res;

  }
   //jaccard similarity ends
}
